import { type NextPage } from "next";
import Head from "next/head";
import { md2jsx } from "~/utils/md2jsx";

import { useState } from "react";
import { type INPC } from "~/utils/NPC";

const Home: NextPage = () => {
  const [loadingState, setLoadingState] = useState("idle");
  const [npc, setNPC] = useState<INPC>({});

  const handleFormSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();

    let url = "/api/generate/npc";
    const form = e.target as HTMLFormElement;
    const elements = form.elements as typeof form.elements & {
      prompt: { value: string };
    };

    if (elements.prompt.value != "") {
      const params = { prompt: elements.prompt.value };
      url += "?" + new URLSearchParams(params).toString();
    }

    setLoadingState("loading");

    // QUESTION:
    // This throws some ESLint error @typescript-eslint/no-misused-promises and
    // checksVoidReturn ... I disabled the ESLint rule for now.
    const response = await fetch(url);
    const data = (await response.json()) as INPC;

    setLoadingState("done");

    console.log(data);

    setNPC(data);
  };

  return (
    <>
      <Head>
        <title>NPC Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="align-center flex h-[100vh] justify-center">
        <div className="">
          <form onSubmit={handleFormSubmit}>
            <div className="mt-4 flex justify-center">
              <div className="label">The NPC is</div>
              <input
                className="ml-1 mr-1 border-b bg-transparent focus:outline-none"
                name="prompt"
              />
              <div className="label">.</div>
            </div>
            <div className="mt-4 flex justify-center">
              <button className="rounded-md bg-blue-600 p-2 px-4" type="submit">
                Generate
              </button>
            </div>
          </form>

          {loadingState == "idle" && (
            <div>Fill out the form and generate an NPC</div>
          )}
          {loadingState == "loading" && <div>Loading...</div>}
          {loadingState == "done" && (
            <>
              {npc.physicalDescription && (
                <div>{md2jsx(npc.physicalDescription)}</div>
              )}
              {npc.backstory && <div>{md2jsx(npc.backstory)}</div>}
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
