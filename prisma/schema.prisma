// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("MIGRATE_DATABASE_URL")
  relationMode = "prisma"
}

// goals               String?  @db.Text
// enemies             String?  @db.Text
// friends             String?  @db.Text
// goals               Goal[]
// rivals              SimpleCharacter[]

model Character {
  id                  String                  @id @default(cuid())
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  userId              String?
  user                User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  finishedGeneration  Boolean                 @default(false)
  originStatement     String?                 @db.Text
  name                String?
  age                 String?
  species             String?
  height              String?
  weight              String?
  eyeColor            String?
  hairColor           String?
  backstory           String?                 @db.Text
  physicalDescription String?                 @db.Text
  demeanor            String?                 @db.Text
  secret              String?                 @db.Text
  roleplayTips        String?                 @db.Text
  goals               Goal[]
  friends             CharacterRelationship[] @relation(name: "Friend", map: "character_friends_fk")
  enemies             CharacterRelationship[] @relation(name: "Enemy", map: "character_enemies_fk")

  @@index([userId])
}

model CharacterRelationship {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  characterId String
  friend      Character? @relation(fields: [characterId], references: [id], map: "character_friends_fk", name: "Friend")
  enemy       Character? @relation(fields: [characterId], references: [id], map: "character_enemies_fk", name: "Enemy")
  description String?    @db.Text

  @@index([characterId])
}

model Goal {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  description String?   @db.Text

  @@index([characterId])
}
